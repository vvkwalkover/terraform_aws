# # Configure the AWS Provider
# provider "aws" {
#   region     = "ap-south-1"
#   access_key = ""
#   secret_key = ""
# }

# # 1. Create vpc
# resource "aws_vpc" "dev-vpc" {
#   cidr_block = "10.0.0.0/16"
#   tags = {
#     Name = "Dev_VPC"
#   }
# }

# # 2. Create a Subnet
# resource "aws_subnet" "main" {
#   vpc_id            = aws_vpc.dev-vpc.id
#   cidr_block        = "10.0.1.0/24"
#   availability_zone = "ap-south-1a"

#   tags = {
#     Name = "Main"
#   }
# }

# # 3. Create Internet Gateway
# resource "aws_internet_gateway" "gw" {
#   vpc_id = aws_vpc.dev-vpc.id

#   tags = {
#     Name = "internet_gateway"
#   }
# }
# # 4. Create Custom Route Table
# resource "aws_route_table" "example" {
#   vpc_id = aws_vpc.dev-vpc.id

#   route {
#     cidr_block = "0.0.0.0/0"
#     gateway_id = aws_internet_gateway.gw.id
#   }
# }

# # 5. Associate subnet with Route Table
# resource "aws_route_table_association" "a" {
#   subnet_id      = aws_subnet.main.id
#   route_table_id = aws_route_table.example.id
# }

# # 6. Create Security Group to allow port 22,80,443
# resource "aws_security_group" "allow_web" {
#   name        = "allow web traffic"
#   description = "Allow HTTPS to web server"
#   vpc_id      = aws_vpc.dev-vpc.id
#   ingress {
#     description = "HTTPS ingress"
#     from_port   = 443
#     to_port     = 443
#     protocol    = "tcp"
#     cidr_blocks = ["0.0.0.0/0"]
#   }
#   ingress {
#     description = "HTTP ingress"
#     from_port   = 80
#     to_port     = 80
#     protocol    = "tcp"
#     cidr_blocks = ["0.0.0.0/0"]
#   }
#   ingress {
#     description = "SSH ingress"
#     from_port   = 22
#     to_port     = 22
#     protocol    = "tcp"
#     cidr_blocks = ["0.0.0.0/0"]
#   }
#   egress {
#     from_port   = 0
#     to_port     = 0
#     protocol    = "-1"
#     cidr_blocks = ["0.0.0.0/0"]
#   }
#   tags = {
#     Name = "allow_web_traffic"
#   }
# }

# # 7. Create a network interface with an ip in the subnet that was created in step 4
# resource "aws_network_interface" "test" {
#   subnet_id       = aws_subnet.main.id
#   private_ips     = ["10.0.1.10"]
#   security_groups = [aws_security_group.allow_web.id]
# }

# # 8. Assign an elastic IP to the network interface created in step 7
# resource "aws_eip" "one" {
#   vpc                       = true
#   network_interface         = aws_network_interface.test.id
#   associate_with_private_ip = "10.0.1.10"
#   depends_on                = [aws_internet_gateway.gw]
# }

# # creating ssh-key.
# resource "aws_key_pair" "key-tf" {
#   key_name   = "key-tf"
#   public_key = file("${path.module}/id_rsa.pub")
# }
# # print ssh-key name.
# output "keyname" {
#   value = aws_key_pair.key-tf.key_name
# }


# # 9. Create Ubuntu server and install/enable apache2

# resource "aws_instance" "web" {
#   ami               = "ami-0f5ee92e2d63afc18"
#   instance_type     = "t2.micro"
#   availability_zone = "ap-south-1a"
#   key_name               = aws_key_pair.key-tf.key_name

#   network_interface {
#     device_index         = 0
#     network_interface_id = aws_network_interface.test.id
#   }

#   user_data = <<-EOF
#                  #!/bin/bash
#                  sudo apt update -y
#                  sudo apt install apache2 -y
#                  sudo systemctl start apache2
#                  sudo bash -c 'echo your very first web server > /var/www/html/index.html'
#                  EOF
#   tags = {
#     Name = "first_instance"
#   }
# }
#-----------------------------------------------------------------------------------------------------------------------------------

# Configure the AWS Provider
provider "aws" {
  region     = "ap-south-1"
  access_key = "AKIA5YLR2KOV7EKWPNG3"
  secret_key = "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"
}

# Create Ubuntu server and install/enable apache2

resource "aws_launch_configuration" "web" {
  image_id = "ami-0f5ee92e2d63afc18"
  instance_type     = "t2.micro"
  key_name               = aws_key_pair.key-tf.key_name
  security_groups = [aws_security_group.allow_web.id]
  # network_interface {
  #   device_index         = 0
  #   network_interface_id = aws_network_interface.test.id
  # }
  user_data = <<-EOF
                 #!/bin/bash
                 sudo apt update -y
                 sudo apt install apache2 -y
                 sudo systemctl start apache2
                 sudo bash -c 'echo your very first web server > /var/www/html/index.html'
                 EOF
}
# creating ssh-key.
resource "aws_key_pair" "key-tf" {
  key_name   = "key-tf"
  public_key = file("${path.module}/id_rsa.pub")
}
# print ssh-key name.
output "keyname" {
  value = aws_key_pair.key-tf.key_name
}


# Create Security Group to allow port 22,80,443
resource "aws_security_group" "allow_web" {
  name        = "allow web traffic"
  description = "Allow HTTPS to web server"
  vpc_id      = aws_vpc.dev-vpc.id
  ingress {
    description = "HTTPS ingress"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    description = "HTTP ingress"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    description = "SSH ingress"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  tags = {
    Name = "allow_web_traffic"
  }
}

# Create vpc
resource "aws_vpc" "dev-vpc" {
  cidr_block = "10.0.0.0/16"
  tags = {
    Name = "Dev_VPC"
  }
}

# 2. Create a Subnet
resource "aws_subnet" "first" {
  vpc_id            = aws_vpc.dev-vpc.id
  cidr_block        = "10.0.1.0/24"
  availability_zone = "ap-south-1a"

  tags = {
    Name = "first"
  }
}
# 2. Create a Subnet
resource "aws_subnet" "second" {
  vpc_id            = aws_vpc.dev-vpc.id
  cidr_block        = "10.0.2.0/24"
  availability_zone = "ap-south-1b"

  tags = {
    Name = "second"
  }
}
#Create an Internet Gateway
resource "aws_internet_gateway" "example" {
  vpc_id = aws_vpc.dev-vpc.id
}

#Create a Route Table and Route:
resource "aws_route_table" "example" {
  vpc_id = aws_vpc.dev-vpc.id
}

resource "aws_route" "example" {
  route_table_id            = aws_route_table.example.id
  destination_cidr_block    = "0.0.0.0/0"
  gateway_id                = aws_internet_gateway.example.id
}

resource "aws_route_table_association" "example" {
  subnet_id      = aws_subnet.first.id
  route_table_id = aws_route_table.example.id
}

resource "aws_lb" "example" {
  name               = "example-lb"
  internal           = false
  load_balancer_type = "application"
  security_groups   = [aws_security_group.allow_web.id]
  subnets           = [aws_subnet.first.id, aws_subnet.second.id] # Change subnet IDs as needed
}

resource "aws_lb_target_group" "example" {
  name     = "example-tg"
  port     = 80
  protocol = "HTTP"
  vpc_id = aws_vpc.dev-vpc.id # Change to your VPC ID
}

resource "aws_autoscaling_group" "example" {
  name                      = "example-asg"
  launch_configuration = aws_launch_configuration.web.name
  target_group_arns        = [aws_lb_target_group.example.arn]
  #availability_zones = ["ap-south-1a","ap-south-1b"] # Change availability zones as needed
  min_size                  = 1
  max_size                  = 3
  desired_capacity         = 2
  health_check_grace_period = 300
  health_check_type         = "EC2" # Use "EC2" for EC2 instance health checks
  // Attach the security group created above
   #vpc_zone_identifier      = ["subnet-12345678", "subnet-98765432"] # Change subnet IDs as needed
  vpc_zone_identifier      = [aws_subnet.first.id, aws_subnet.second.id] # Change subnet IDs as needed
  tag {
    key                 = "Name"
    value               = "example-asg"
    propagate_at_launch = true
  }
}
